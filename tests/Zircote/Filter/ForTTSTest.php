<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-02-13 at 19:16:38.
 */
class Pincrowd_Filter_ForTTSTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Pincrowd_Filter_ForTTS
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Pincrowd_Filter_ForTTS;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert (chr(0)) == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter()
    {
        $this->assertEquals(
          '',
          $this->object->filter(chr(0))
        );
    }

    /**
     * Generated from @assert ("дравсствуйте") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter2()
    {
        $this->assertEquals(
          '',
          $this->object->filter("дравсствуйте")
        );
    }

    /**
     * Generated from @assert ("\xff") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter3()
    {
        $this->assertEquals(
          '',
          $this->object->filter("\xff")
        );
    }

    /**
     * Generated from @assert ("\x01") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter4()
    {
        $this->assertEquals(
          '',
          $this->object->filter("\x01")
        );
    }

    /**
     * Generated from @assert ("\x1f") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter5()
    {
        $this->assertEquals(
          '',
          $this->object->filter("\x1f")
        );
    }

    /**
     * Generated from @assert ('&quot;') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter6()
    {
        $this->assertEquals(
          '',
          $this->object->filter('&quot;')
        );
    }

    /**
     * Generated from @assert ('&#039;') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter7()
    {
        $this->assertEquals(
          '',
          $this->object->filter('&#039;')
        );
    }

    /**
     * Generated from @assert ('&#151;') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter8()
    {
        $this->assertEquals(
          '',
          $this->object->filter('&#151;')
        );
    }

    /**
     * Generated from @assert ('&#8230;') == '. '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter9()
    {
        $this->assertEquals(
          '. ',
          $this->object->filter('&#8230;')
        );
    }

    /**
     * Generated from @assert ('&#8217;') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter10()
    {
        $this->assertEquals(
          '',
          $this->object->filter('&#8217;')
        );
    }

    /**
     * Generated from @assert ('&#8216;') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter11()
    {
        $this->assertEquals(
          '',
          $this->object->filter('&#8216;')
        );
    }

    /**
     * Generated from @assert ('&#8230;') == '. '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter12()
    {
        $this->assertEquals(
          '. ',
          $this->object->filter('&#8230;')
        );
    }

    /**
     * Generated from @assert ('^^/') == '. '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter13()
    {
        $this->assertEquals(
          '. ',
          $this->object->filter('^^/')
        );
    }

    /**
     * Generated from @assert ('[...]') == '. '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter14()
    {
        $this->assertEquals(
          '. ',
          $this->object->filter('[...]')
        );
    }

    /**
     * Generated from @assert ('...') == '.'.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter15()
    {
        $this->assertEquals(
          '.',
          $this->object->filter('...')
        );
    }

    /**
     * Generated from @assert ("\"") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter16()
    {
        $this->assertEquals(
          '',
          $this->object->filter("\"")
        );
    }

    /**
     * Generated from @assert ('\*+') == '\+'.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter17()
    {
        $this->assertEquals(
          '\+',
          $this->object->filter('\*+')
        );
    }

    /**
     * Generated from @assert ('++***++') == '++++'.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter18()
    {
        $this->assertEquals(
          '++++',
          $this->object->filter('++***++')
        );
    }

    /**
     * Generated from @assert ('===') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter19()
    {
        $this->assertEquals(
          '',
          $this->object->filter('===')
        );
    }

    /**
     * Generated from @assert ('==') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter20()
    {
        $this->assertEquals(
          '',
          $this->object->filter('==')
        );
    }

    /**
     * Generated from @assert ('=') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter21()
    {
        $this->assertEquals(
          '',
          $this->object->filter('=')
        );
    }

    /**
     * Generated from @assert ('this is a test === yo') == 'this is a test  yo'.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter22()
    {
        $this->assertEquals(
          'this is a test  yo',
          $this->object->filter('this is a test === yo')
        );
    }

    /**
     * Generated from @assert ('~~~~') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter23()
    {
        $this->assertEquals(
          '',
          $this->object->filter('~~~~')
        );
    }

    /**
     * Generated from @assert ('~') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter24()
    {
        $this->assertEquals(
          '',
          $this->object->filter('~')
        );
    }

    /**
     * Generated from @assert ('~~') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter25()
    {
        $this->assertEquals(
          '',
          $this->object->filter('~~')
        );
    }

    /**
     * Generated from @assert ('~~~') == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter26()
    {
        $this->assertEquals(
          '',
          $this->object->filter('~~~')
        );
    }

    /**
     * Generated from @assert ("\t") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter27()
    {
        $this->assertEquals(
          '',
          $this->object->filter("\t")
        );
    }

    /**
     * Generated from @assert ('this is a test ~~~ yo') == 'this is a test  yo'.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter28()
    {
        $this->assertEquals(
          'this is a test  yo',
          $this->object->filter('this is a test ~~~ yo')
        );
    }

    /**
     * Generated from @assert ('<br/>') == " ".
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter29()
    {
        $this->assertEquals(
          " ",
          $this->object->filter('<br/>')
        );
    }

    /**
     * Generated from @assert ('<br />') == " ".
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter30()
    {
        $this->assertEquals(
          " ",
          $this->object->filter('<br />')
        );
    }

    /**
     * Generated from @assert ('<p>') == ".".
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter31()
    {
        $this->assertEquals(
          ".",
          $this->object->filter('<p>')
        );
    }

    /**
     * Generated from @assert ('<') == ' '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter32()
    {
        $this->assertEquals(
          ' ',
          $this->object->filter('<')
        );
    }

    /**
     * Generated from @assert ('>') == ' '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter33()
    {
        $this->assertEquals(
          ' ',
          $this->object->filter('>')
        );
    }

    /**
     * Generated from @assert (':-)') == ' smile face, '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter34()
    {
        $this->assertEquals(
          ' smile face, ',
          $this->object->filter(':-)')
        );
    }

    /**
     * Generated from @assert (':)') == ' smile face, '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter35()
    {
        $this->assertEquals(
          ' smile face, ',
          $this->object->filter(':)')
        );
    }

    /**
     * Generated from @assert (':-(') == ' frown face '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter36()
    {
        $this->assertEquals(
          ' frown face ',
          $this->object->filter(':-(')
        );
    }

    /**
     * Generated from @assert (';-)') == ' wink, wink,  '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter37()
    {
        $this->assertEquals(
          ' wink, wink,  ',
          $this->object->filter(';-)')
        );
    }

    /**
     * Generated from @assert (';)') == ' wink, wink,  '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter38()
    {
        $this->assertEquals(
          ' wink, wink,  ',
          $this->object->filter(';)')
        );
    }

    /**
     * Generated from @assert ('^') == ' '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter39()
    {
        $this->assertEquals(
          ' ',
          $this->object->filter('^')
        );
    }

    /**
     * Generated from @assert ("\n") == ''.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter40()
    {
        $this->assertEquals(
          '',
          $this->object->filter("\n")
        );
    }

    /**
     * Generated from @assert ('Pincrowd') == 'if buy phone'.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter41()
    {
        $this->assertEquals(
          'if buy phone',
          $this->object->filter('Pincrowd')
        );
    }

    /**
     * Generated from @assert ('Mr.') == ' mister '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter42()
    {
        $this->assertEquals(
          ' mister ',
          $this->object->filter('Mr.')
        );
    }

    /**
     * Generated from @assert ('Ms.') == ' miz '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter43()
    {
        $this->assertEquals(
          ' miz ',
          $this->object->filter('Ms.')
        );
    }

    /**
     * Generated from @assert ('Mrs.') == ' misses '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter44()
    {
        $this->assertEquals(
          ' misses ',
          $this->object->filter('Mrs.')
        );
    }

    /**
     * Generated from @assert ('Miss.') == ' miss '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter45()
    {
        $this->assertEquals(
          ' miss ',
          $this->object->filter('Miss.')
        );
    }

    /**
     * Generated from @assert ('Ph.D') == ' P H D '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter46()
    {
        $this->assertEquals(
          ' P H D ',
          $this->object->filter('Ph.D')
        );
    }

    /**
     * Generated from @assert ("'") == "".
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter47()
    {
        $this->assertEquals(
          "",
          $this->object->filter("'")
        );
    }

    /**
     * Generated from @assert ("’") == "".
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter48()
    {
        $this->assertEquals(
          "",
          $this->object->filter("’")
        );
    }

    /**
     * Generated from @assert ('&') == ' and '.
     *
     * @covers Pincrowd_Filter_ForTTS::filter
     */
    public function testFilter49()
    {
        $this->assertEquals(
          ' and ',
          $this->object->filter('&')
        );
    }
}
